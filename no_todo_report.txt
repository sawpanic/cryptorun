No-TODO QA Gate Report (Go Scanner) - 2025-09-07
===============================================

‚ùå src\guardci\unified_guardci.go:
  Line 3: // Package guardci provides Guard-CI stub implementations for compliance testing
  Line 46: // CheckPortfolioConstraints validates portfolio constraint compliance (noop stub)
  Line 51: Message:   "Guard-CI stub: portfolio constraints check passed",
  Line 57: // CheckAlertsGovernance validates alerts governance compliance (noop stub)
  Line 62: Message:   "Guard-CI stub: alerts governance check passed",
  Line 68: // CheckExecutionQuality validates execution quality compliance (noop stub)
  Line 73: Message:   "Guard-CI stub: execution quality check passed",
  Line 79: // CheckSSEThrottling validates SSE throttling compliance (noop stub)
  Line 84: Message:   "Guard-CI stub: SSE throttling check passed",
  Line 104: // Validate runs comprehensive validation checks (noop stub)
  Line 125: // GetStats returns Guard-CI statistics (noop stub)

‚ùå docs\STATUS.md:
  Line 16: - **Scope**: Embedded acceptance verification with no-stub gate and Phase 7 validation

‚ùå internal\interfaces\http\endpoints\explain.go:
  Line 46: Message:   "Symbol must be in format XXX-USD (e.g., BTC-USD)",
  Line 93: // isValidSymbol validates symbol format (XXX-USD)

‚ùå docs\PREMOVE.BACKTEST.V33.md:
  Line 18: - Implement an isotonic calibration stub (monotone mapping), monthly refresh with freeze governance.

‚ùå internal\data\etf\flows.go:
  Line 138: etfList = []string{"ETHA", "ETH"} // Placeholder - ETH ETFs pending approval
  Line 239: // Mock for ETH ETFs (currently pending approval)

‚ùå src\application\analyst\types.go:
  Line 3: // Minimal compile-safe stub for analyst package

‚ùå docs\ENGINEERING_TRANSPARENCY_LOG~20250904-123103.md:
  Line 62: - Implement regime detection: Current regime stub exists; planned dynamic weights/gates (see Roadmap).

‚ùå docs\SCANNERS.md:
  Line 57: - **WriteJSONL**: Stub implementation with logging
  Line 58: - **WriteLedger**: Stub implementation with logging
  Line 85: 2. **Feature Flag**: Toggle between legacy stub and live delegation
  Line 110: **Stub Method Tests**:
  Line 111: - WriteJSONL returns no error (stub)
  Line 112: - WriteLedger returns no error (stub)
  Line 123: - **Coverage**: Interface compliance, error handling, stub methods
  Line 147: - Feature flag controls delegation vs stub behavior
  Line 165: - **CPU**: No-op for stub methods, structured error generation only

‚ùå internal\scheduler\scheduler.go:
  Line 149: NextRun:      time.Now().Add(time.Minute), // TODO: calculate actual next run
  Line 150: LastRun:      time.Now().Add(-time.Hour),  // TODO: track actual last run
  Line 164: // TODO: Implement cron scheduling logic
  Line 190: // TODO: Implement proper cron schedule checking
  Line 642: // TODO: Implement actual caching (Redis, file cache, etc.)
  Line 692: "normal", // TODO: Get actual regime from context
  Line 739: "normal", // TODO: Get actual regime from context
  Line 805: "regime":    "normal", // TODO: Get actual regime
  Line 1200: // TODO: Implement actual regime cache lookup

‚ùå tests\unit\providers_guard_test.go:
  Line 286: // TODO: Implement when metrics package is available

‚ùå internal\application\pipeline\scan.go:
  Line 181: return nil // Stub implementation for compatibility
  Line 187: return nil // Stub implementation for compatibility
  Line 193: // Stub types for compilation compatibility - these reference existing application types

‚ùå internal\data\ws\binance.go:
  Line 39: // TODO: Implement actual WebSocket connection
  Line 70: // TODO: Send actual subscription message
  Line 80: // TODO: Send actual unsubscription message

‚ùå cmd\cryptorun\scheduler_main.go:
  Line 60: currentRegime := "normal"  // TODO: Get from cached regime

‚ùå docs\BUILD.md:
  Line 104: #### No-TODO Gate
  Line 105: Prevents builds with TODO/FIXME/STUB markers:
  Line 105: Prevents builds with TODO/FIXME/STUB markers:
  Line 105: Prevents builds with TODO/FIXME/STUB markers:
  Line 138: 1. **QA Gates**: No-TODO scanner runs first

‚ùå docs\CODE_REVIEW_BUNDLE.md:
  Line 17: 4. **Code Analysis**: Harvests annotations (TODO/FIXME/HACK/BUG)
  Line 17: 4. **Code Analysis**: Harvests annotations (TODO/FIXME/HACK/BUG)

‚ùå scripts\qa\no_todo.sh:
  Line 4: # No-TODO QA Gate Scanner
  Line 5: # Fails builds if TODO/FIXME/STUB/XXX markers are found in tracked source code
  Line 5: # Fails builds if TODO/FIXME/STUB/XXX markers are found in tracked source code
  Line 5: # Fails builds if TODO/FIXME/STUB/XXX markers are found in tracked source code
  Line 5: # Fails builds if TODO/FIXME/STUB/XXX markers are found in tracked source code
  Line 12: PATTERNS="TODO|FIXME|XXX|STUB|PENDING"
  Line 12: PATTERNS="TODO|FIXME|XXX|STUB|PENDING"
  Line 12: PATTERNS="TODO|FIXME|XXX|STUB|PENDING"
  Line 12: PATTERNS="TODO|FIXME|XXX|STUB|PENDING"
  Line 12: PATTERNS="TODO|FIXME|XXX|STUB|PENDING"
  Line 28: echo "üîç Running No-TODO QA Gate Scanner..."
  Line 59: echo "No-TODO QA Gate Report - $(date)" > "$REPORT_FILE"
  Line 107: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)" >> "$REPORT_FILE"
  Line 107: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)" >> "$REPORT_FILE"
  Line 107: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)" >> "$REPORT_FILE"
  Line 110: echo "1. Remove or resolve the TODO/FIXME/STUB items" >> "$REPORT_FILE"
  Line 110: echo "1. Remove or resolve the TODO/FIXME/STUB items" >> "$REPORT_FILE"
  Line 110: echo "1. Remove or resolve the TODO/FIXME/STUB items" >> "$REPORT_FILE"
  Line 118: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)"
  Line 118: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)"
  Line 118: echo "‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in $found_issues file(s)"
  Line 122: echo "‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found in $total_files scanned files"
  Line 122: echo "‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found in $total_files scanned files"
  Line 122: echo "‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found in $total_files scanned files"
  Line 123: echo "‚úÖ All clear: No TODO/FIXME/STUB markers found" >> "$REPORT_FILE"
  Line 123: echo "‚úÖ All clear: No TODO/FIXME/STUB markers found" >> "$REPORT_FILE"
  Line 123: echo "‚úÖ All clear: No TODO/FIXME/STUB markers found" >> "$REPORT_FILE"

‚ùå internal\spec\microstructure.go:
  Line 5: // TODO(QA): enforce venue-native L1/L2 (Kraken/OKX/Coinbase)
  Line 12: ready:       true, // Stub passes for build

‚ùå docs\DOCS_POLICY.md:
  Line 32: **Feature Branches**: Auto-stub with reminder
  Line 33: - Code-only changes trigger automatic CHANGELOG.md stub generation
  Line 34: - Stub format: `- chore(wip): auto-stub for commit <short-sha> (to be edited before PR)`
  Line 34: - Stub format: `- chore(wip): auto-stub for commit <short-sha> (to be edited before PR)`
  Line 36: - Developer reminded to edit stub before creating PR
  Line 82: (CHANGELOG.md automatically updated with stub entry)

‚ùå tests\integration\cli_scan_commands_test.go:
  Line 162: "implementation pending - use momentum for now",

‚ùå internal\application\scan.go:
  Line 20: // Stub types for compilation
  Line 30: // Domain stub types for compilation

‚ùå internal\bench\diagnostics\analyzer.go:
  Line 17: // Stub types for undefined dependencies
  Line 23: // NewRegimeDetector creates a stub regime detector
  Line 28: // DefaultRegimeConfig returns stub regime config
  Line 415: // TODO: Implement regime-aware configuration logic
  Line 421: // TODO: Implement compliant entry logic with gates/guards validation
  Line 428: // TODO: Implement exit hierarchy: hard stop, venue health, 48h limit, accel reversal, fade, trailing, targets

‚ùå signals\entry.go:
  Line 41: // Trend quality: stub accept

‚ùå src\application\premove\runner.go:
  Line 318: Status:    "pending",

‚ùå internal\score\composite\inputs.go:
  Line 22: // ScoreAsset performs basic composite scoring (stub for compilation)
  Line 24: // Basic scoring stub - return simple result

‚ùå tests\unit\qa_gate_test.go:
  Line 42: description: "Code without any TODO markers should pass",
  Line 52: // TODO: implement proper error handling
  Line 57: description: "Code with TODO marker should fail",
  Line 67: // FIXME: this is broken
  Line 72: description: "Code with FIXME marker should fail",
  Line 82: // STUB: placeholder implementation
  Line 87: description: "Code with STUB marker should fail",
  Line 97: // todo: lowercase should also be caught
  Line 102: description: "Lowercase TODO should also be caught",
  Line 114: // TODO: this should be ignored in vendor/
  Line 118: description: "TODO in vendor/ should be ignored",
  Line 163: patterns := regexp.MustCompile("(?i)\\b(TODO|FIXME|XXX|STUB|PENDING)\\b")
  Line 163: patterns := regexp.MustCompile("(?i)\\b(TODO|FIXME|XXX|STUB|PENDING)\\b")
  Line 163: patterns := regexp.MustCompile("(?i)\\b(TODO|FIXME|XXX|STUB|PENDING)\\b")
  Line 163: patterns := regexp.MustCompile("(?i)\\b(TODO|FIXME|XXX|STUB|PENDING)\\b")
  Line 163: patterns := regexp.MustCompile("(?i)\\b(TODO|FIXME|XXX|STUB|PENDING)\\b")

‚ùå tests\unit\qa_guard_test.go:
  Line 12: // Run no-stub gate scan
  Line 16: t.Fatalf("No-stub gate scan failed: %v", err)
  Line 42: t.Logf("‚úÖ PASS No-stub gate: 0 scaffold patterns found (scanned %d files)", report.Scanned)

‚ùå internal\domain\micro.go:
  Line 3: // Microstructure stub types for build compatibility

‚ùå internal\microstructure\checker.go:
  Line 204: // TODO: Implement proper VADR calculation with historical volume data

‚ùå src\guardci\explainer_guardci.go:
  Line 3: // Package guardci provides Guard-CI explainer stub implementations for compliance testing
  Line 48: // CheckScoringExplanations validates that all scoring has proper explanations (noop stub)
  Line 54: Message:   "Guard-CI stub: scoring explanations check passed",
  Line 60: // CheckAttribution validates that all outputs have proper attribution (noop stub)
  Line 66: Message:   "Guard-CI stub: attribution check passed",
  Line 72: // CheckPortfolioPruningExplanations validates portfolio pruning explanations (noop stub)
  Line 78: Message:   "Guard-CI stub: portfolio pruning explanations check passed",
  Line 84: // CheckAlertsDecisionExplanations validates alerts decision explanations (noop stub)
  Line 90: Message:   "Guard-CI stub: alerts decision explanations check passed",
  Line 96: // CheckExecutionQualityExplanations validates execution quality explanations (noop stub)
  Line 102: Message:   "Guard-CI stub: execution quality explanations check passed",
  Line 123: // ValidateExplainability runs comprehensive explainability validation (noop stub)
  Line 144: // GetExplainerStats returns explainer Guard-CI statistics (noop stub)

‚ùå docs\PREMOVE_IMPLEMENTATION_PLAN_V3.3.md:
  Line 52: backtest.go          // NEW: PIT replay + hit-rates + isotonic calibration stub
  Line 333: - Isotonic calibration stub: monotone mapping with monthly refresh and immutability guarantees.

‚ùå cmd\cryptorun\ship_main.go:
  Line 3: // Ship main stub for build compatibility

‚ùå internal\qa\nostub_gate.go:
  Line 16: // Hit represents a stub detection hit
  Line 35: regexp.MustCompile(`(?i)TODO`),
  Line 36: regexp.MustCompile(`(?i)FIXME`),
  Line 37: regexp.MustCompile(`(?i)STUB`),
  Line 40: regexp.MustCompile(`(?i)return nil\s*//\s*TODO`),
  Line 45: "TODO",
  Line 46: "FIXME",
  Line 47: "STUB",
  Line 53: // NostubScan scans a directory tree for stub patterns in Go source files
  Line 127: // scanFile scans a single file for stub patterns
  Line 185: // ValidateNoStubs performs the no-stub gate check and returns an error if stubs are found
  Line 193: return fmt.Errorf("found %d stub patterns in code - acceptance gate failed", len(hits))
  Line 212: // NewNoStubGate creates a new no-stub gate scanner
  Line 217: // Scan performs the stub detection scan

‚ùå src\application\premove\premove_test_shims.go:
  Line 32: // NewCorrelationMatrix creates a new correlation matrix (test-only stub)
  Line 41: matrix[s1][s2] = 0.1 // Low correlation stub
  Line 53: // GetCorrelation returns correlation between two symbols (test-only stub)
  Line 121: // Simple stub for test compatibility

‚ùå tests\unit\qa_nostub_gate_test.go:
  Line 15: // Create a fake Go file with a TODO
  Line 22: // TODO: implement this function properly
  Line 78: t.Error("TODO pattern not detected")
  Line 96: // TODO: write actual test
  Line 105: // Create a regular Go file with TODO
  Line 110: // TODO: implement
  Line 130: // Should only detect TODO in regular file, not test file
  Line 159: // Create file with stub
  Line 160: stubFile := filepath.Join(tempDir, "stub.go")
  Line 163: func stub() {
  Line 164: // FIXME: this is a stub implementation
  Line 164: // FIXME: this is a stub implementation
  Line 170: t.Fatalf("Failed to create stub file: %v", err)
  Line 183: t.Error("Expected RunGate to fail on stub, but it passed")
  Line 240: // Create file with various stub patterns
  Line 253: // TODO: implement this
  Line 257: // FIXME: broken logic
  Line 261: // This is a STUB function
  Line 265: return nil // TODO
  Line 269: // TODO: refactor this code

‚ùå docs\ALGO.md:
  Line 348: Removed TODO/stub markers from core algorithm and pipeline code (internal/algo/**, internal/scan/pipeline/**) without behavior changes. All existing functionality preserved with identical test outputs.
  Line 348: Removed TODO/stub markers from core algorithm and pipeline code (internal/algo/**, internal/scan/pipeline/**) without behavior changes. All existing functionality preserved with identical test outputs.

‚ùå internal\application\pipeline\legacy_pipeline_test.go:
  Line 57: // Test WriteJSONL - should not error (stub implementation)
  Line 61: t.Errorf("WriteJSONL should not error (stub), got: %v", err)
  Line 64: // Test WriteLedger - should not error (stub implementation)
  Line 67: t.Errorf("WriteLedger should not error (stub), got: %v", err)

‚ùå src\application\analyst\kraken_winners.go:
  Line 3: // Minimal compile-safe stub for analyst package

‚ùå exchanges\okx\book_stub.go:
  Line 15: // TODO: Implement OKX WS orderbook provider

‚ùå docs\PREMOVE.PATCH.V33.md:
  Line 21: - `src/application/premove/backtest.go`   // PIT replay + hit-rates + isotonic calibration stub

‚ùå _codereview\CryptoEdge\validation\forensic_investigation_report.md:
  Line 147: - **TODO/FIXME Accumulation:** Multiple unaddressed technical debt markers
  Line 147: - **TODO/FIXME Accumulation:** Multiple unaddressed technical debt markers

‚ùå docs\PREMOVE_TODO.md:
  Line 1: # Premove Implementation TODO
  Line 95: **Next Step:** Implement test suites, then fill the TODO blocks to complete the milestones.

‚ùå docs\QA.md:
  Line 5: The CryptoRun QA runner provides comprehensive quality assurance testing with acceptance verification and hardened provider guards. It executes phases 0-6 per QA.MAX.50 specification, plus mandatory Phase -1 (no-stub gate) and Phase 7 (acceptance verification).
  Line 9: ### Phase -1: No-Stub Gate (MANDATORY)
  Line 10: The no-stub gate is now a **hard failure** that blocks deployment if any scaffold patterns are detected:
  Line 12: - **Patterns Blocked**: TODO, FIXME, STUB, NotImplemented, "panic(not implemented)", "dummy implementation", "return nil // TODO"
  Line 12: - **Patterns Blocked**: TODO, FIXME, STUB, NotImplemented, "panic(not implemented)", "dummy implementation", "return nil // TODO"
  Line 12: - **Patterns Blocked**: TODO, FIXME, STUB, NotImplemented, "panic(not implemented)", "dummy implementation", "return nil // TODO"
  Line 12: - **Patterns Blocked**: TODO, FIXME, STUB, NotImplemented, "panic(not implemented)", "dummy implementation", "return nil // TODO"
  Line 51: # Run with both stub checking and acceptance verification
  Line 79: ### Phase -1: No-Stub Gate (Mandatory in CI)
  Line 81: - **Purpose**: Scan repository for stub/scaffold patterns before network operations
  Line 84: - `TODO`, `FIXME`, `STUB`, `XXX`, `PENDING` comments (case-insensitive)
  Line 84: - `TODO`, `FIXME`, `STUB`, `XXX`, `PENDING` comments (case-insensitive)
  Line 84: - `TODO`, `FIXME`, `STUB`, `XXX`, `PENDING` comments (case-insensitive)
  Line 84: - `TODO`, `FIXME`, `STUB`, `XXX`, `PENDING` comments (case-insensitive)
  Line 84: - `TODO`, `FIXME`, `STUB`, `XXX`, `PENDING` comments (case-insensitive)
  Line 86: - `return nil // TODO`, `// TODO:`, `// FIXME:`
  Line 86: - `return nil // TODO`, `// TODO:`, `// FIXME:`
  Line 86: - `return nil // TODO`, `// TODO:`, `// FIXME:`
  Line 90: #### Standalone No-TODO Scanner
  Line 92: The No-TODO gate can be run independently of the full QA suite:
  Line 115: - Fails fast if TODO/FIXME/STUB markers found
  Line 115: - Fails fast if TODO/FIXME/STUB markers found
  Line 115: - Fails fast if TODO/FIXME/STUB markers found
  Line 163: ### No-Stub Gate Artifacts (Phase -1)
  Line 164: - `out/audit/nostub_hits.json`: Detected stub/scaffold patterns (only on detection)
  Line 170: ‚ùå FAIL SCAFFOLDS_FOUND +hint: remove TODO/STUB/not-implemented
  Line 170: ‚ùå FAIL SCAFFOLDS_FOUND +hint: remove TODO/STUB/not-implemented
  Line 172: **Cause**: Stub/scaffold patterns detected in non-test Go files
  Line 173: **Solution**: Remove or implement all TODO, FIXME, STUB, and `panic("not implemented")` patterns
  Line 173: **Solution**: Remove or implement all TODO, FIXME, STUB, and `panic("not implemented")` patterns
  Line 173: **Solution**: Remove or implement all TODO, FIXME, STUB, and `panic("not implemented")` patterns
  Line 266: # Run stub checking before commit
  Line 282: **Issue**: No-stub gate triggers false positives
  Line 312: The Algorithm QA Sweep validates the correctness, determinism, and production readiness of the MomentumCore and Quality-Dip optimization implementations. This comprehensive validation enforces strict no-stub gates and specification conformance requirements.
  Line 316: #### No-Stub Gate: ‚ùå FAILED
  Line 322: - Hard-coded regime detection returning "bull" stub
  Line 329: - Pattern types: TODO (24), STUB (58), FIXME (2), NotImplemented (1)
  Line 329: - Pattern types: TODO (24), STUB (58), FIXME (2), NotImplemented (1)
  Line 329: - Pattern types: TODO (24), STUB (58), FIXME (2), NotImplemented (1)
  Line 372: - Resolve all TODO/STUB/FIXME markers
  Line 372: - Resolve all TODO/STUB/FIXME markers
  Line 372: - Resolve all TODO/STUB/FIXME markers

‚ùå docs\UI.md:
  Line 46: Status         string                 `json:"status"`          // "pending", "sent", "rate_limited", "failed"

‚ùå internal\interfaces\http\handlers\explain.go:
  Line 18: // Validate symbol format (XXX-USD)
  Line 21: "Symbol must be in format XXX-USD (e.g., BTC-USD)")
  Line 42: // isValidSymbol validates symbol format (XXX-USD)

‚ùå internal\spec\social_cap.go:
  Line 5: // TODO(QA): cap brand/social ‚â§ +10 pts AFTER residuals
  Line 12: ready:       true, // Stub passes for build

‚ùå docs\HTTP_API.md:
  Line 134: - `symbol`: Trading pair in format `XXX-USD` (e.g., `BTC-USD`, `ETH-USD`)

‚ùå internal\data\cold\parquet.go:
  Line 23: // Note: This is a stub implementation as Parquet support requires additional dependencies
  Line 25: // TODO: Implement actual Parquet reading
  Line 32: // TODO: Implement Parquet validation

‚ùå internal\spec\factors.go:
  Line 33: // TODO(QA): real factor graph per mission.md (Momentum protected)
  Line 40: ready:       true, // Stub passes for build

‚ùå src\application\premove\alerts.go:
  Line 471: // Stub types and functions for test compatibility

‚ùå scripts\qa\scanner.go:
  Line 12: // NoTodoScanner implements the No-TODO QA gate
  Line 27: // NewScanner creates a new No-TODO scanner
  Line 29: // Case-insensitive patterns for TODO-like markers
  Line 30: patterns := regexp.MustCompile(`(?i)\b(TODO|FIXME|XXX|STUB|PENDING)\b`)
  Line 30: patterns := regexp.MustCompile(`(?i)\b(TODO|FIXME|XXX|STUB|PENDING)\b`)
  Line 30: patterns := regexp.MustCompile(`(?i)\b(TODO|FIXME|XXX|STUB|PENDING)\b`)
  Line 30: patterns := regexp.MustCompile(`(?i)\b(TODO|FIXME|XXX|STUB|PENDING)\b`)
  Line 30: patterns := regexp.MustCompile(`(?i)\b(TODO|FIXME|XXX|STUB|PENDING)\b`)
  Line 102: // ScanFile scans a single file for TODO-like patterns
  Line 181: fmt.Println("üîç Running No-TODO QA Gate Scanner (Go version)...")
  Line 197: fmt.Fprintf(file, "No-TODO QA Gate Report (Go Scanner) - %s\n", "2025-09-07")
  Line 201: fmt.Printf("‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found\n")
  Line 201: fmt.Printf("‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found\n")
  Line 201: fmt.Printf("‚úÖ QA Gate PASSED: No TODO/FIXME/STUB markers found\n")
  Line 202: fmt.Fprintf(file, "‚úÖ All clear: No TODO/FIXME/STUB markers found\n")
  Line 202: fmt.Fprintf(file, "‚úÖ All clear: No TODO/FIXME/STUB markers found\n")
  Line 202: fmt.Fprintf(file, "‚úÖ All clear: No TODO/FIXME/STUB markers found\n")
  Line 225: fmt.Printf("‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in %d file(s)\n", len(fileResults))
  Line 225: fmt.Printf("‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in %d file(s)\n", len(fileResults))
  Line 225: fmt.Printf("‚ùå QA Gate FAILED: Found TODO/FIXME/STUB markers in %d file(s)\n", len(fileResults))

‚ùå cmd\cryptorun\cmd_bench_factorweights_stub.go:
  Line 10: // benchFactorweightsCmd provides backward compatibility stub

‚ùå exchanges\coinbase\book_stub.go:
  Line 15: // TODO: Implement Coinbase WS orderbook provider

‚ùå internal\microstructure\proofs.go:
  Line 120: RequiredValue: 50.0, // TODO: Make configurable
  Line 139: RequiredValue: 100000, // TODO: Make configurable
  Line 158: RequiredValue: 1.75, // TODO: Make configurable

‚ùå internal\stream\bus.go:
  Line 177: BusTypeStub   BusType = "stub"   // For testing/development

‚ùå docs\ENGINEERING_TRANSPARENCY_LOG.md:
  Line 343: **Mission:** Add stub analyzer fields/methods to clear undefined references and enable build continuation past diagnostics module.
  Line 349: - Stub type definitions: `RegimeDetector`, `RegimeConfig`, `Entry`, `Exit`
  Line 352: **Stub Methods with TODOs:**
  Line 353: - `getRegimeAwareConfig(regime string) RegimeConfig` - TODO: Implement regime-specific configuration logic
  Line 354: - `findCompliantEntry(priceData []sources.PriceBar, config RegimeConfig) (Entry, bool)` - TODO: Implement compliant entry logic with gates/guards validation (score‚â•75, VADR‚â•1.8, funding divergence‚â•2œÉ, fatigue/freshness/late-fill guards)
  Line 355: - `findEarliestExit(priceData []sources.PriceBar, entryBar int, config RegimeConfig) (Exit, bool)` - TODO: Implement exit hierarchy (hard stop, venue health, 48h limit, accel reversal, fade, trailing, targets)
  Line 504: - Implement regime detection: Current regime stub exists; planned dynamic weights/gates (see Roadmap).
  Line 562: - Extend main menu with Balanced (40/30/30) and Acceleration entries. [Partially pending]

‚ùå internal\domain\regime.go:
  Line 3: // Regime stub functions for build compatibility
  Line 28: return "bull" // stub

‚ùå src\application\premove\backtest.go:
  Line 3: // TODO: Implement backtesting functionality for premove strategies
  Line 12: // TODO: Add fields for historical data, pattern tracking, learning metrics
  Line 16: // TODO: Initialize with configuration from config/premove.yaml
  Line 22: // TODO: Implement backtesting logic
  Line 30: // TODO: Implement pattern exhaustion detection
  Line 37: // TODO: Return backtesting performance results

‚ùå internal\qa\runner.go:
  Line 102: // Phase -1: No-Stub Gate (if enabled)
  Line 238: log.Info().Msg("Running Phase -1: No-Stub Gate")
  Line 245: // No-stub gate failed - this is a hard fail before any network work
  Line 248: result.Hint = "Remove TODO/STUB/not-implemented patterns from non-test Go files before QA execution"
  Line 248: result.Hint = "Remove TODO/STUB/not-implemented patterns from non-test Go files before QA execution"
  Line 251: fmt.Printf("‚ùå FAIL SCAFFOLDS_FOUND +hint: remove TODO/STUB/not-implemented\n")
  Line 251: fmt.Printf("‚ùå FAIL SCAFFOLDS_FOUND +hint: remove TODO/STUB/not-implemented\n")
  Line 256: log.Info().Dur("duration", duration).Msg("Phase -1: No-Stub Gate passed")

Summary:
- Files with issues: 58
- Total markers found: 293
