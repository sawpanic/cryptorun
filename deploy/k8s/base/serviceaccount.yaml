apiVersion: v1
kind: ServiceAccount
metadata:
  name: cryptorun
  namespace: cryptorun
  labels:
    app: cryptorun
    component: serviceaccount
    version: v3.2.1
  annotations:
    description: "Service account for CryptoRun application pods"
automountServiceAccountToken: false
secrets: []
---
# Role for CryptoRun application (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cryptorun-role
  namespace: cryptorun
  labels:
    app: cryptorun
    component: rbac
rules:
  # Allow reading own namespace info
  - apiGroups: [""]
    resources: ["namespaces"]
    resourceNames: ["cryptorun"]
    verbs: ["get"]
  # Allow reading configmaps (for dynamic config reload)
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cryptorun-config", "cryptorun-config-files"]
    verbs: ["get", "watch"]
  # Allow reading secrets (for credentials)
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["cryptorun-secrets"]
    verbs: ["get"]
  # Allow getting pod information (for health checks and metrics)
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  # Allow access to endpoints for service discovery
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
---
# Role binding to associate ServiceAccount with Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cryptorun-rolebinding
  namespace: cryptorun
  labels:
    app: cryptorun
    component: rbac
subjects:
  - kind: ServiceAccount
    name: cryptorun
    namespace: cryptorun
roleRef:
  kind: Role
  name: cryptorun-role
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy (if enabled in cluster)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: cryptorun-psp
  labels:
    app: cryptorun
    component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAs'
    ranges:
      - min: 65532
        max: 65532
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 65532
        max: 65532
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 65532
        max: 65532
  readOnlyRootFilesystem: true
  seccompProfile:
    type: RuntimeDefault